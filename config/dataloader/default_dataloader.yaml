# ==================
# DataLoader:
# ==================
dataloader:
  # Bool whether to use the data from klas for training.
  use_klas_data: false

  # Bool whether to use the data from planktonnet for training.
  use_planktonnet_data: true

  use_canadian_data: false

  # use to combine come classes into super-classes
  # if you don't want to use super-classes set as null

  super_classes:
    MarineSnow:
      - MarineSnow_Comet
      - MarineSnow_Detritus
      - MarineSnow_FaecalPellet
      - MarineSnow_Jelly
    Radiolaria:
      - Radiolaria
      - Foraminifera

  # whether to oversample underrepresented data:
  oversample_data: false

  # whether to load the whole dataset into memory at the beginning of the training:
  preload_dataset: false

  excluded_classes: ["Blurry", "Bubbles"]

  # Relative splitting of the data into subsets. Splitting is done along the time dimension and data is not shuffled
  # before the splitting, so that the validation data always comes chronologically after the train data.
  # The size of the test dataset is the 1 - (train_split + validation_split):
  train_split: 0.7
  validation_split: 0.2

  log_confusion_matrices: True  # whether to log confusion matrices on every batch
  log_images: False  # whether to log images and labels for first batch of every validation and training epoch

  # Whether the different datasets should be shuffled or not:
  shuffle_train_dataset: true
  shuffle_validation_dataset: false
  shuffle_test_dataset: false
  tensorboard_logger_logdir: "logs/tb_logs/"
  checkpoint_file_path: "logs/checkpoints"

  # The size to which images should be padded/cropped
  final_image_size: 128

  # All transforms specified below are being composed and applied to the images. Where necessary, supply CONFIG.final_image_size as an input
  transform:
    - "SquarePad()"
    - "transforms.Resize(size=[CONFIG.final_image_size, CONFIG.final_image_size])"
    - "transforms.RandomRotation(360)"
    - "transforms.RandomHorizontalFlip()"
    - "transforms.RandomVerticalFlip()"
    - "transforms.ColorJitter(brightness=0.1, contrast=0.1, saturation=0.1, hue=0.1)"
    - "transforms.ToTensor()"
